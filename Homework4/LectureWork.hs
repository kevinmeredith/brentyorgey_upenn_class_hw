uncurry' :: (a -> b -> c) -> (a,b) -> c
uncurry' f (x,y) = f x y

-- foldr (:) [] [1,2,3]
-- a (`f` (b `f` (c `f` z)))
-- (1 : (2 : (3 : [])))

-- foldl (:) [] [1,2,3]
-- ((z `f` a) `f` b) `f` c
-- ((([] : 1) : 2) : 3) 

-- foldr (-) [1,2,3]
-- 1 - (2 - (3 - 0))
-- 1 - (2 - 3)
-- 1 - (-1)
-- 2

-- foldl (-) [1,2,3]
-- (((0 - 1) - 2) - 3) 
-- ((-1) - 2) - 3
-- (-3 - 3) 
-- -6

---foldl (\acc x -> acc ++ [x] ) [] [1,2,3]

-- (([] `f` 1) `f` 2) `f` 3
-- (([] ++ [1]) ++ [2]) ++ [3])

-- foldl v. foldr notes
--foldr f z [a,b,c] == a `f` (b `f` (c `f` z))
--foldl f z [a,b,c] == ((z `f` a) `f` b) `f` c